import { Text, Type } from "main.core";
import { Guide as UiGuide } from "ui.tour";
import { Backend } from "./backend";

type GuideOption = {
	id: ?string;
	steps: Array<StepOption>,
	...
};

type StepOption = {
	id: null | string,
	events: null | {
		onShow: ?Function,
		onClose: ?Function,
	},
	...
};

export class Guide extends UiGuide
{
	static #isAllTourDisabled: Promise<boolean>;

	#isIdAutoGenerated: boolean;
	#autogeneratedIdPrefix: string = 'sign-tour-guide-';
	#backend: Backend = new Backend();

	constructor(options: GuideOption)
	{
		super(options);
		if (Type.isStringFilled(options.id))
		{
			this.setId(options.id);
			this.#isIdAutoGenerated = false;
		}
		else
		{
			this.setId(this.#autogeneratedIdPrefix + Text.getRandom(14));
			this.#isIdAutoGenerated = true;
		}

		if (Type.isUndefined(Guide.#isAllTourDisabled))
		{
			Guide.#isAllTourDisabled = this.#backend.isAllToursDisabled();
		}
	}

	save(): void
	{
		this.#backend.saveVisit(this.getId());
	}

	start()
	{
		Guide.#isAllTourDisabled.then(isDisabled => {
			if (!isDisabled)
			{
				super.start();
			}
		});
	}

	startOnce(): Promise<null>
	{
		if (this.#isIdAutoGenerated)
		{
			throw new Error("Cant start guide once if id autogenerated. Set id in constructor");
		}
		if (!this.getAutoSave())
		{
			throw new Error("Cant start guide once if guide is not auto saved");
		}

		return Promise.all([
					this.#backend.getLastVisitDate(this.getId()),
					Guide.#isAllTourDisabled,
				],
			)
			.then(
				([{ lastVisitDate }, isTourDisabled]) => {
					if (!isTourDisabled && Type.isNull(lastVisitDate))
					{
						this.start();
					}
				},
			);
	}
}