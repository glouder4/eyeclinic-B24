this.BX = this.BX || {};
this.BX.Sign = this.BX.Sign || {};
(function (exports,ui_tour,main_core) {
	'use strict';

	class Backend {
	  saveVisit(tourId) {
	    return main_core.ajax.runAction('sign.api.tour.saveVisit', {
	      data: {
	        tourId
	      }
	    }).then(({
	      data
	    }) => data);
	  }
	  getLastVisitDate(tourId) {
	    return main_core.ajax.runAction('sign.api.tour.getLastVisitDate', {
	      data: {
	        tourId
	      }
	    }).then(({
	      data
	    }) => {
	      if (!main_core.Type.isNil(data == null ? void 0 : data.lastVisitDate)) {
	        data.lastVisitDate = new Date(data.lastVisitDate);
	      }
	      return data;
	    });
	  }
	  isAllToursDisabled() {
	    return main_core.ajax.runAction('sign.api.tour.isAllToursDisabled', {}).then(({
	      data
	    }) => data);
	  }
	}

	var _isAllTourDisabled = /*#__PURE__*/babelHelpers.classPrivateFieldLooseKey("isAllTourDisabled");
	var _isIdAutoGenerated = /*#__PURE__*/babelHelpers.classPrivateFieldLooseKey("isIdAutoGenerated");
	var _autogeneratedIdPrefix = /*#__PURE__*/babelHelpers.classPrivateFieldLooseKey("autogeneratedIdPrefix");
	var _backend = /*#__PURE__*/babelHelpers.classPrivateFieldLooseKey("backend");
	class Guide extends ui_tour.Guide {
	  constructor(options) {
	    super(options);
	    Object.defineProperty(this, _isIdAutoGenerated, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _autogeneratedIdPrefix, {
	      writable: true,
	      value: 'sign-tour-guide-'
	    });
	    Object.defineProperty(this, _backend, {
	      writable: true,
	      value: new Backend()
	    });
	    if (main_core.Type.isStringFilled(options.id)) {
	      this.setId(options.id);
	      babelHelpers.classPrivateFieldLooseBase(this, _isIdAutoGenerated)[_isIdAutoGenerated] = false;
	    } else {
	      this.setId(babelHelpers.classPrivateFieldLooseBase(this, _autogeneratedIdPrefix)[_autogeneratedIdPrefix] + main_core.Text.getRandom(14));
	      babelHelpers.classPrivateFieldLooseBase(this, _isIdAutoGenerated)[_isIdAutoGenerated] = true;
	    }
	    if (main_core.Type.isUndefined(babelHelpers.classPrivateFieldLooseBase(Guide, _isAllTourDisabled)[_isAllTourDisabled])) {
	      babelHelpers.classPrivateFieldLooseBase(Guide, _isAllTourDisabled)[_isAllTourDisabled] = babelHelpers.classPrivateFieldLooseBase(this, _backend)[_backend].isAllToursDisabled();
	    }
	  }
	  save() {
	    babelHelpers.classPrivateFieldLooseBase(this, _backend)[_backend].saveVisit(this.getId());
	  }
	  start() {
	    babelHelpers.classPrivateFieldLooseBase(Guide, _isAllTourDisabled)[_isAllTourDisabled].then(isDisabled => {
	      if (!isDisabled) {
	        super.start();
	      }
	    });
	  }
	  startOnce() {
	    if (babelHelpers.classPrivateFieldLooseBase(this, _isIdAutoGenerated)[_isIdAutoGenerated]) {
	      throw new Error("Cant start guide once if id autogenerated. Set id in constructor");
	    }
	    if (!this.getAutoSave()) {
	      throw new Error("Cant start guide once if guide is not auto saved");
	    }
	    return Promise.all([babelHelpers.classPrivateFieldLooseBase(this, _backend)[_backend].getLastVisitDate(this.getId()), babelHelpers.classPrivateFieldLooseBase(Guide, _isAllTourDisabled)[_isAllTourDisabled]]).then(([{
	      lastVisitDate
	    }, isTourDisabled]) => {
	      if (!isTourDisabled && main_core.Type.isNull(lastVisitDate)) {
	        this.start();
	      }
	    });
	  }
	}
	Object.defineProperty(Guide, _isAllTourDisabled, {
	  writable: true,
	  value: void 0
	});

	exports.Guide = Guide;

}((this.BX.Sign.Tour = this.BX.Sign.Tour || {}),BX.UI.Tour,BX));
//# sourceMappingURL=tour.bundle.js.map
